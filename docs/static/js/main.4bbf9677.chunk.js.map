{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","defaultProps","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAoCeA,EAlCY,SAAC,GAEpB,IADJC,EACG,EADHA,cACG,EAEmCC,mBAAU,IAF7C,mBAEKC,EAFL,KAEiBC,EAFjB,KAmBH,OACI,mCACI,sBAAMC,SAZO,SAAEC,GAEnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAe,MAMf,SACI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SArBU,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,e,+BCVnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAEpB,IADJH,EACG,EADHA,MAAOV,EACJ,EADIA,IAGP,OACI,sBAAKc,UAAY,yCAAjB,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,kCAAMA,EAAN,WCsBGO,EA3BQ,SAAC,GAEhB,IADJnB,EACG,EADHA,SACG,ECFqB,SACxBA,GACG,IAAD,EAEwBd,mBAAU,CAChCqB,KAAM,GACNa,SAAS,IAJX,mBAEKC,EAFL,KAEYC,EAFZ,KAwBF,OAjBAC,qBAAU,WACNxB,EAASC,GACLwB,MAAM,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAOEqB,EDtB2BK,CAAc1B,GAAlCa,EAFX,EAEKN,KAAca,EAFnB,EAEmBA,QAEtB,OACI,qCACI,oBAAIJ,UAAY,oCAAhB,SAAuDhB,IAErDoB,GAAW,mBAAGJ,UAAY,mCAAf,wBAEb,qBAAKA,UAAY,YAAjB,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADGA,EAAIC,aEhBlCgB,EAAe,WAAM,MAGezC,mBAAU,CAAE,cAH3B,mBAGf0C,EAHe,KAGH3C,EAHG,KAUvB,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAEA,6BACM2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEIA,SAAaA,GADLA,YAehC2B,EAAaE,aAAe,GAIbF,QCtCTG,G,MAAUC,SAASC,cAAe,SAExCC,IAASC,OAAQ,cAAC,EAAD,IAAmBJ,K","file":"static/js/main.4bbf9677.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const AddCategory = ( {\r\n    setCategories\r\n} ) => {\r\n\r\n    const [ inputValue, setInputValue ] = useState( '' );\r\n\r\n    const handleInputChange = ( e ) => {\r\n\r\n        setInputValue( e.target.value );\r\n    };\r\n\r\n    const handleSubmit = ( e ) => {\r\n\r\n        e.preventDefault();\r\n        \r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue ,...cats ] );\r\n            setInputValue( '' );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit = { handleSubmit } >\r\n                <input\r\n                    type = \"text\"\r\n                    value = { inputValue }\r\n                    onChange = { handleInputChange }\r\n                />  \r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=Sy1cjL0VpJOQfXpDu8NuD0E4f2qpHglc`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        };\r\n    } );\r\n\r\n    return gifs; \r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ( {\r\n    title, url\r\n} ) => {\r\n\r\n    return (\r\n        <div className = \"card animate__animated animate__fadeIn\" >\r\n            <img src = { url } alt = { title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {\r\n    category \r\n} ) => {\r\n    \r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className = \"animate__animated animate__fadeIn\" >{ category }</h3>\r\n\r\n            { loading && <p className = \"animate__animated animate__flash\" >...Loading</p> }\r\n            \r\n            <div className = \"card-grid\" >\r\n\r\n                { \r\n                    images.map( img => ( \r\n                        <GifGridItem\r\n                            key = { img.id }\r\n                            { ...img }\r\n                        />\r\n                    ) )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","\r\nimport { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( \r\n    category\r\n ) => {\r\n    \r\n    const [state, setState] = useState( {\r\n        data: [],\r\n        loading: true\r\n    } );\r\n\r\n    useEffect(() => {\r\n        getGifs( category ).\r\n            then( imgs => {\r\n            \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n            \r\n    }, [ category ]);\r\n    // useEffect( () => {\r\n    //     getGifs( category ).then(\r\n    //         setImages\r\n    //     );\r\n    // }, [ category ] );\r\n\r\n    return state; // { data: [], loading: true };\r\n\r\n}\r\n","// import React, { Fragment } from 'react';\r\nimport React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    \r\n    //const categories = [ 'One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [ categories, setCategories ] = useState( [ 'One Punch' ] )\r\n    \r\n    // const handleAdd =  (  ) => {\r\n    //     //setCategories( [ ...categories, 'Naruto' ] );\r\n    //     setCategories( cats => [ ...cats, 'Naruto' ] )\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            \r\n            <AddCategory setCategories = { setCategories } />\r\n            \r\n            <hr />\r\n\r\n            <ol>\r\n                { categories.map( category => ( \r\n                    <GifGrid \r\n                        key = { category }\r\n                        category = { category }\r\n                    />\r\n                 ) ) }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n// Aqui definiremos el tipo de propiedades del componente:\r\nGifExpertApp.propTypes = {\r\n    // VARIABLES TYPES\r\n}\r\n\r\nGifExpertApp.defaultProps = {\r\n    // DEFAULT VARIABLES VALUES\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\n\nimport './index.css';\n//import reportWebVitals from './reportWebVitals';\n\nconst divRoot = document.querySelector( '#app' );\n\nReactDOM.render( <GifExpertApp /> , divRoot );\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n// GifExpertApp"],"sourceRoot":""}